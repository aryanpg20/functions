{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMFVuQkKZOVgbDrugTOeOHJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"IweCi4w0XjXG"},"outputs":[],"source":["1.python is a programming language thats popular because its versatile,easy to learn,and can run on many platforms.\n","its used for a variety of tasks,including data science,machine learning and web development.\n","it is popular for:-\n","1.versatility\n","2.easy to learn\n","3.libraries\n","4.cross-platform compatibility\n","5.free to download\n","6.integrates well with systems\n","7.increases development speed\n","8.in-demand\n"]},{"cell_type":"code","source":["2.a python interpreter is a program that reads and executes python code.its a core component of the python programming language.\n"],"metadata":{"id":"Vh6pABA3a46S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["3.keywords in python are predefined reserved words with special meanings so the interpreter can understand them.they perform specific tasks in python\n","programming and are a part of its syntax.\n"],"metadata":{"id":"vVnqCqqgbWHS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["4.no,keywords cannot be used as variable names because they define the structure and syntax rules of a programming language.\n","KEYWORS:define the structure and syntax rules of a programming language.\n","VARIABLE NAMES:words that identify a variable in program.\n"],"metadata":{"id":"dCZ-nF0Xb4L3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["5.in python,mutability is the ability to change the value or state of an object after it has being created.mutable objects can be modified in place,\n","which means that the original object is changed,rather than a new object being created.\n"],"metadata":{"id":"EwEJ82pEc588"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["6.tuples and lists are the same in every way except two:tuples use parentheses instead of square brackets,and the items in tuples cannot be modified.\n","but the items in lists can be modified.we often call lists mutable(meaning they can be changed) and tuples immutable(meaning they cannot be changed)"],"metadata":{"id":"GkjWEamrdjSZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["7.the '=='is known as the equality operator.the \"is\" is known as the identity operator.the == operator helps us compare the equality of objects\n","the is operator helps us check wheather different variables point towards a similar objects in the memory.\n"],"metadata":{"id":"o2VgTjcfefkZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["8.logical operators in python are keywords that evaluate conditions and combine multiple ex-pressions.they are used in conditional statements\n","to create decision-making processes.\n","types of logical operators:\n","1.AND\n","2.OR\n","3.NOT"],"metadata":{"id":"bE_Y-A_PfUtM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["9.type casting in python is the process of changing a variables data type from one type to an other,its also known as type conversion.\n"],"metadata":{"id":"MeFTtpO2gBSZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["10.implicit type casting is automatic,the compiler automatically converts one data type to another when there is no risk of data loss.\n","this is often used to convert smaller data types to larger data types.\n","explicit type casting is manual,the programmer manually converts one data type to another.this is used when there is a possibility of data loss.\n","explicit type casting gives the programmer more control over the data conversion process.\n"],"metadata":{"id":"sDbrFjmTgggk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["11.conditional statements in python help control the flow of a program by evaluting conditions and executing code based on those conditions.\n","they can make code more efficient and easier to read.\n"],"metadata":{"id":"jWL_M-wAhrCs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["12.the\"elif\" keyword in python,stands for \"else if\".it can be used in conditional statements to check for multiple conditions, for example\n","if the first condition if false,it moves on to the next \"elif\" statement to check if that condition is true.\n"],"metadata":{"id":"i1ht3wMNiL2d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["13.the main difference between a for loop and a while loop is the number of times the code is repeated:\n","for loop:repeats a section of code a known number of time.\n","while loop:repeats a section of code an unknown number of times until a condition is met."],"metadata":{"id":"m4rwI2Xzjr5P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["14.use a for loop when you know the loop should execute n times.use a while loop for reading a file into a variable.use a while loop when asking for\n","user input.use a while loop when the increment value is nonstandard."],"metadata":{"id":"f90pRCM3kXzr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **PRACTICAL QUESTIONS**"],"metadata":{"id":"xc2JzLV9lRff"}},{"cell_type":"code","source":["print(\"hello,world!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uYuSEqVIlb_Y","executionInfo":{"status":"ok","timestamp":1738130591401,"user_tz":-330,"elapsed":572,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"d88443d2-23ac-4e71-b3af-a42dea218bf0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hello,world!\n"]}]},{"cell_type":"code","source":["age = input(\"18\")\n","name = input(\"aryan\")\n","print()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":339},"id":"iV3QhGPHl4lt","executionInfo":{"status":"error","timestamp":1738130580000,"user_tz":-330,"elapsed":34730,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"0ff2b335-0c82-45d3-f255-57955ccc5deb"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-1141bc4ce2cd>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"18\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"aryan\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"code","source":["import keyword\n","#printing all keywords at once using \"kwlist()\"\n","print(\"the list of keywords is:\")\n","print(keyword.kwlist)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iR4LVmOYmrnp","executionInfo":{"status":"ok","timestamp":1738130529243,"user_tz":-330,"elapsed":6,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"2c93ac3c-b1a3-4e92-b174-2c6bc7625101"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["the list of keywords is:\n","['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n"]}]},{"cell_type":"code","source":[" import keyword\n","s = 'for'\n","#check if its a python keyword(s):\n","print(f\"'{s}'is a python keyword.\")\n","print(f\"'{s}'is not a python keyword.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jq_pxRj_nq8X","executionInfo":{"status":"ok","timestamp":1738130610573,"user_tz":-330,"elapsed":3,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"e06c3d4b-2fe1-4732-9fdb-c1435750c081"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["'for'is a python keyword.\n","'for'is not a python keyword.\n"]}]},{"cell_type":"code","source":["5.#creating a list of tuples manually\n","a = [(1,'apple'),(2,'banana'),(3,'cherry')]\n","print (a)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pJvikJvSomqP","executionInfo":{"status":"ok","timestamp":1738130421218,"user_tz":-330,"elapsed":7,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"9f930506-6fc2-4da8-c438-87c6a3e8c563"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 'apple'), (2, 'banana'), (3, 'cherry')]\n"]}]},{"cell_type":"code","source":[" tuple1 = (0,1,2,3)\n","tuple1[o] = 4\n","print(tuple1)\n","\n"],"metadata":{"id":"6bKrvmJvqLCl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" s = \"42\"\n"," num = int(s)\n"," print(num)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q5SkkTxDDxWO","executionInfo":{"status":"ok","timestamp":1738170984936,"user_tz":-330,"elapsed":402,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"17a147eb-bdb8-4195-a10a-52ed9f826740"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["42\n"]}]},{"cell_type":"code","source":[" print(type(a))\n"," b = 3.0\n"," print(type(b))\n"," c = a + b\n"," print(c)\n"," print(type(c))\n"," d = a * b\n"," print(d)\n"," print(type(d))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MeRotY9fEHnk","executionInfo":{"status":"ok","timestamp":1738171211547,"user_tz":-330,"elapsed":10,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"a12adf4f-0347-41f4-f4a4-4ccdd063642a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'int'>\n","<class 'float'>\n","10.0\n","<class 'float'>\n","21.0\n","<class 'float'>\n"]}]},{"cell_type":"code","source":[" def even_sum(number):\n","  count = 0\n","  sum = 0\n","  while count <= number:\n","    if count%2 == 0:\n","      sum = sum + count\n","    count = count + 1\n","  return sum"],"metadata":{"id":"C2V3osqwIE7l","executionInfo":{"status":"ok","timestamp":1738172434107,"user_tz":-330,"elapsed":429,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["S = \"GeeksforGeeks\"\n","rev = S[::-1]\n","print(rev)\n"," print(rev)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"jALBFDTnJo-p","executionInfo":{"status":"error","timestamp":1738172642412,"user_tz":-330,"elapsed":5,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"8a66de0e-87d9-413d-c9be-b202f96eec2d"},"execution_count":23,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"unexpected indent (<ipython-input-23-e4ac96f18d4d>, line 4)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-23-e4ac96f18d4d>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    print(rev)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"]}]},{"cell_type":"code","source":["   num = 6\n","\n","\n","   factorial = 1\n","\n","\n","   for i in range(1, num + 1):\n","       factorial = factorial*i\n","   print(\"The factorial of\",num,\"is\",factorial)\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"em_7H4FZKcgx","executionInfo":{"status":"ok","timestamp":1738172853647,"user_tz":-330,"elapsed":472,"user":{"displayName":"Aryan Gundawar","userId":"14314298564824026351"}},"outputId":"fccb7e8d-987f-4e77-9ae0-9e9e745b92f1"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["The factorial of 6 is 720\n"]}]}]}